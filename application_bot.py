from telebot import types, TeleBot
import dotenv
import os
import logging
import time

dotenv.load_dotenv()
bot = TeleBot(os.getenv("BOT_APPLICATION_KEY"))
chat_id = os.getenv("ADMINS_CHAT_ID")

messages = {}

menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(types.KeyboardButton('–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'))
menu.add(types.KeyboardButton("–ü—Ä–æ –±–æ—Ç–∞"))

def show_menu(message):
    bot.send_message(message.chat.id, '–ü–æ–≤–µ—Ä—Ç–∞—é —É –º–µ–Ω—é', reply_markup=menu)

@bot.message_handler(commands=['menu'])
def menu_command(message):
    show_menu(message)

@bot.message_handler(commands=['start'])
def start(message):
    id = message.chat.id
    bot.send_message(
        id,
        f"–í—ñ—Ç–∞—é {message.from_user.first_name}, —Ü–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é –ª—ñ—Ü–µ—é. "
        f"–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º",
        reply_markup=menu
    )

@bot.message_handler(func=lambda m: m.text == '–ü—Ä–æ –±–æ—Ç–∞')
def about(message):
    id = message.chat.id
    bot.send_message(id, "–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω–∏–π –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∑–≤'—è–∑–∫—É –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é –ú–æ–ª–æ–¥—ñ–∂–Ω–µ–Ω—Å—å–∫–æ–≥–æ –ª—ñ—Ü–µ—é\n"
                         "–©–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' —É –º–µ–Ω—é –Ω–∏–∂—á–µ.\n")

@bot.message_handler(func=lambda m: m.text == '–ó–∞–ª–∏—à–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
def send_message(message):
    id = message.chat.id
    msg = bot.send_message(
        id,
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó –æ–¥–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /menu —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, message_getter)

def message_getter(message):
    user_id = message.chat.id
    text = message.text

    if text.strip().lower() == '/menu':
        show_menu(message)
        return

    messages[user_id] = {'text': text}

    bot.send_message(user_id, '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤—ñ–π —Ç–µ–∫—Å—Ç:')
    bot.send_message(user_id, text)
    bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å '—Ç–∞–∫' —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–±–æ '–Ω—ñ' —â–æ–± –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏")
    bot.register_next_step_handler(message, message_checker)

def message_checker(message):
    user_id = message.chat.id
    ans = message.text.strip().lower()

    if ans == '/menu':
        show_menu(message)
        return

    if ans == '—Ç–∞–∫':
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        contact_btn = types.KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
        kb.add(contact_btn)
        bot.send_message(user_id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤‚Äô—è–∑–∫—É:", reply_markup=kb)
        bot.register_next_step_handler(message, contact_getter)

    elif ans == '–Ω—ñ':
        bot.send_message(user_id, '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
        send_message(message)

    else:
        bot.send_message(user_id, "–ù–µ–º–∞ —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, message_checker)

def contact_getter(message):
    user_id = message.chat.id
    if message.contact:
        contact = message.contact.phone_number
        messages[user_id]['contact'] = contact

        full_message = (
            f"üö® –ù–û–í–ï –ó–í–ï–†–ù–ï–ù–ù–Ø üö®\n"
            f"üë§ –Ü–º'—è: {message.from_user.first_name} {message.from_user.last_name or ''}\n"
            f"üîó Username: @{message.from_user.username or '‚Äî'}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
            f"‚úâÔ∏è –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è:\n{messages[user_id]['text']}"
        )

        bot.send_message(chat_id, full_message)
        bot.send_message(user_id, "–í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ", reply_markup=menu)

    else:
        bot.send_message(user_id, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, contact_getter)

def start_application_bot():
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            logging.exception("‚ùå –ë–æ—Ç —É–ø–∞–≤ –∑ –ø–æ–º–∏–ª–∫–æ—é:")
            time.sleep(5)
